#!/usr/bin/env python3
"""
Script pour tester la fonction de formatage de transcription avec noms personnalis√©s
"""

import sys
import os

# Ajouter le r√©pertoire de l'application au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.services.transcription_checker import replace_speaker_names_in_text
from app.db.queries import get_meeting_speakers
import sqlite3

def test_format_transcript():
    """Tester le formatage de transcription"""
    
    # R√©cup√©rer les donn√©es de test
    conn = sqlite3.connect('app.db')
    cursor = conn.cursor()
    
    # R√©cup√©rer la r√©union de test
    cursor.execute("SELECT id, transcript_text FROM meetings WHERE title LIKE '%test%' ORDER BY created_at DESC LIMIT 1")
    meeting_result = cursor.fetchone()
    
    if not meeting_result:
        print("‚ùå Aucune r√©union de test trouv√©e")
        return
    
    meeting_id, original_transcript = meeting_result
    
    # R√©cup√©rer les locuteurs personnalis√©s
    cursor.execute("SELECT speaker_id, custom_name FROM meeting_speakers WHERE meeting_id = ?", (meeting_id,))
    speakers_results = cursor.fetchall()
    
    conn.close()
    
    print("=== TEST DE FORMATAGE DE TRANSCRIPTION ===")
    print(f"üìã Meeting ID: {meeting_id}")
    print(f"üìÑ Transcription originale ({len(original_transcript)} caract√®res):")
    print("=" * 50)
    print(original_transcript[:500] + "..." if len(original_transcript) > 500 else original_transcript)
    print("=" * 50)
    
    print("\nüë• Locuteurs personnalis√©s:")
    speakers_mapping = {}
    for speaker_id, custom_name in speakers_results:
        speakers_mapping[speaker_id] = custom_name
        print(f"   ‚Ä¢ {speaker_id} ‚Üí {custom_name}")
    
    # Tester la fonction de formatage
    print("\nüîÑ Application du formatage...")
    
    try:
        formatted_transcript = replace_speaker_names_in_text(original_transcript, speakers_mapping)
        
        print(f"‚úÖ Formatage r√©ussi! ({len(formatted_transcript)} caract√®res)")
        print("\nüìù Transcription format√©e:")
        print("=" * 50)
        print(formatted_transcript[:500] + "..." if len(formatted_transcript) > 500 else formatted_transcript)
        print("=" * 50)
        
        # V√©rifier si les noms personnalis√©s sont pr√©sents
        print("\nüîç V√©rification des remplacements:")
        for speaker_id, custom_name in speakers_mapping.items():
            if custom_name in formatted_transcript:
                print(f"   ‚úÖ '{custom_name}' trouv√© dans la transcription format√©e")
            else:
                print(f"   ‚ùå '{custom_name}' NON trouv√© dans la transcription format√©e")
                
            if speaker_id in formatted_transcript:
                print(f"   ‚ö†Ô∏è  '{speaker_id}' encore pr√©sent dans la transcription format√©e")
            else:
                print(f"   ‚úÖ '{speaker_id}' correctement remplac√©")
        
        # Comparaison
        print(f"\nüìä Comparaison:")
        print(f"   Original: {len(original_transcript)} caract√®res")
        print(f"   Format√©:  {len(formatted_transcript)} caract√®res")
        print(f"   Diff√©rence: {len(formatted_transcript) - len(original_transcript)} caract√®res")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du formatage: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_format_transcript() 