#!/usr/bin/env python3
"""
Script pour tester directement la fonction process_meeting_summary
"""

import sys
import os
from datetime import datetime

# Ajouter le r√©pertoire de l'application au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

def test_direct_function():
    """Tester directement la fonction process_meeting_summary"""
    print("=== TEST DIRECT DE LA FONCTION process_meeting_summary ===")
    
    try:
        from app.services.mistral_summary import process_meeting_summary
        from app.db.queries import get_meeting, get_meeting_speakers
        
        # ID de notre r√©union de test
        meeting_id = "bc96e19f-f7df-4dba-aebb-4ce658309bc2"
        
        # R√©cup√©rer l'utilisateur de test
        import sqlite3
        conn = sqlite3.connect('app.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE email = ?", ("test@example.com",))
        user_result = cursor.fetchone()
        conn.close()
        
        if not user_result:
            print("‚ùå Utilisateur test non trouv√©")
            return
        
        user_id = user_result[0]
        print(f"üë§ User ID: {user_id}")
        print(f"üìã Meeting ID: {meeting_id}")
        
        # R√©cup√©rer les donn√©es de la r√©union
        meeting = get_meeting(meeting_id, user_id)
        if not meeting:
            print("‚ùå R√©union non trouv√©e")
            return
        
        print(f"üìä R√©union trouv√©e: {meeting.get('title')}")
        print(f"üìÑ Transcription disponible: {len(meeting.get('transcript_text', ''))} caract√®res")
        
        # R√©cup√©rer les locuteurs personnalis√©s
        speakers_data = get_meeting_speakers(meeting_id, user_id)
        if speakers_data:
            print("üë• Locuteurs personnalis√©s:")
            for speaker in speakers_data:
                print(f"   ‚Ä¢ {speaker['speaker_id']} ‚Üí {speaker['custom_name']}")
        else:
            print("‚ÑπÔ∏è Aucun locuteur personnalis√©")
        
        # Tester la fonction de formatage directement
        from app.services.transcription_checker import replace_speaker_names_in_text
        
        transcript_text = meeting.get("transcript_text", "")
        if speakers_data:
            speaker_names = {}
            for speaker in speakers_data:
                speaker_names[speaker['speaker_id']] = speaker['custom_name']
            
            formatted_transcript = replace_speaker_names_in_text(transcript_text, speaker_names)
            
            print(f"\nüìù Extrait de la transcription originale:")
            print(transcript_text[:200] + "...")
            
            print(f"\nüìù Extrait de la transcription format√©e:")
            print(formatted_transcript[:200] + "...")
            
            # V√©rifier si les noms ont √©t√© remplac√©s
            for speaker_id, custom_name in speaker_names.items():
                if custom_name in formatted_transcript:
                    print(f"   ‚úÖ '{custom_name}' trouv√© dans la transcription format√©e")
                else:
                    print(f"   ‚ùå '{custom_name}' NON trouv√© dans la transcription format√©e")
        
        # Tester la g√©n√©ration de compte rendu directement
        print(f"\nüöÄ Test de la g√©n√©ration de compte rendu...")
        
        # Importer la fonction de g√©n√©ration
        from app.services.mistral_summary import generate_meeting_summary
        
        # Utiliser la transcription format√©e
        if speakers_data:
            speaker_names = {speaker['speaker_id']: speaker['custom_name'] for speaker in speakers_data}
            formatted_transcript = replace_speaker_names_in_text(transcript_text, speaker_names)
        else:
            formatted_transcript = transcript_text
        
        summary_text = generate_meeting_summary(formatted_transcript, meeting.get("title", "R√©union"))
        
        if summary_text:
            print("‚úÖ Compte rendu g√©n√©r√© avec succ√®s!")
            print(f"üìè Longueur: {len(summary_text)} caract√®res")
            
            print("\nüìù Extrait du compte rendu:")
            print("=" * 50)
            print(summary_text[:500] + "..." if len(summary_text) > 500 else summary_text)
            print("=" * 50)
            
            # V√©rifier la pr√©sence des noms personnalis√©s
            if speakers_data:
                print("\nüîç V√©rification des noms personnalis√©s dans le compte rendu:")
                for speaker in speakers_data:
                    custom_name = speaker["custom_name"]
                    if custom_name in summary_text:
                        print(f"   ‚úÖ '{custom_name}' trouv√© dans le compte rendu")
                    else:
                        print(f"   ‚ùå '{custom_name}' NON trouv√© dans le compte rendu")
        else:
            print("‚ùå √âchec de la g√©n√©ration du compte rendu")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_direct_function() 