#!/usr/bin/env python3
"""
Script pour cr√©er une r√©union de test avec transcription et locuteurs personnalis√©s
"""

import requests
import json
import sqlite3
import uuid
from datetime import datetime

BASE_URL = "http://localhost:8000"

def login():
    """Se connecter et r√©cup√©rer un token"""
    login_data = {
        "email": "test@example.com",
        "password": "testpassword123"
    }
    
    response = requests.post(f"{BASE_URL}/auth/login/json", json=login_data)
    if response.status_code == 200:
        return response.json()["access_token"]
    else:
        print(f"Erreur de connexion: {response.status_code}")
        return None

def create_test_meeting_in_db():
    """Cr√©er directement une r√©union de test dans la base de donn√©es"""
    conn = sqlite3.connect('app.db')
    cursor = conn.cursor()
    
    # R√©cup√©rer l'ID de l'utilisateur test
    cursor.execute("SELECT id FROM users WHERE email = ?", ("test@example.com",))
    user_result = cursor.fetchone()
    if not user_result:
        print("Utilisateur test non trouv√©")
        return None
    
    user_id = user_result[0]
    meeting_id = str(uuid.uuid4())
    
    # Cr√©er la r√©union
    meeting_data = {
        'id': meeting_id,
        'user_id': user_id,
        'title': 'R√©union de test - Compte rendu avec noms personnalis√©s',
        'file_url': 'test://meeting-file-url',
        'transcript_status': 'completed',
        'transcript_text': '''Speaker A: Bonjour √† tous, je suis ravi de vous retrouver pour cette r√©union importante.

Speaker B: Merci de nous avoir organis√© cette rencontre. J'ai plusieurs points √† aborder concernant le projet.

Speaker A: Parfait, nous allons commencer par faire le point sur l'avancement des d√©veloppements.

Speaker C: De mon c√¥t√©, j'ai termin√© l'impl√©mentation des nouvelles fonctionnalit√©s que nous avions discut√©es la semaine derni√®re.

Speaker B: Excellent travail ! Pouvez-vous nous donner plus de d√©tails sur les performances ?

Speaker C: Bien s√ªr, les tests montrent une am√©lioration de 30% par rapport √† la version pr√©c√©dente.

Speaker A: C'est formidable ! Qu'en est-il de la s√©curit√© ?

Speaker B: J'ai effectu√© un audit complet et tout semble conforme aux standards requis.

Speaker C: Parfait, nous pouvons donc proc√©der au d√©ploiement la semaine prochaine.

Speaker A: Tr√®s bien, je vais pr√©parer la documentation pour l'√©quipe de production.

Speaker B: N'oubliez pas de pr√©voir une session de formation pour les utilisateurs finaux.

Speaker C: Bien not√©, je m'en occupe d√®s demain.

Speaker A: Excellent, merci √† tous pour votre travail. √Ä bient√¥t !''',
        'summary_status': 'pending',
        'duration_seconds': 300,
        'speakers_count': 3,
        'created_at': datetime.now().isoformat()
    }
    
    # Ins√©rer la r√©union
    cursor.execute('''
        INSERT INTO meetings (id, user_id, title, file_url, transcript_status, transcript_text, summary_status, duration_seconds, speakers_count, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        meeting_data['id'],
        meeting_data['user_id'],
        meeting_data['title'],
        meeting_data['file_url'],
        meeting_data['transcript_status'],
        meeting_data['transcript_text'],
        meeting_data['summary_status'],
        meeting_data['duration_seconds'],
        meeting_data['speakers_count'],
        meeting_data['created_at']
    ))
    
    # Cr√©er les locuteurs personnalis√©s
    speakers = [
        {'speaker_id': 'Speaker A', 'custom_name': 'Marie Dupont (CEO)'},
        {'speaker_id': 'Speaker B', 'custom_name': 'Jean Martin (CTO)'},
        {'speaker_id': 'Speaker C', 'custom_name': 'Sophie Leclerc (Dev Lead)'}
    ]
    
    for speaker in speakers:
        cursor.execute('''
            INSERT INTO meeting_speakers (id, meeting_id, speaker_id, custom_name, created_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            str(uuid.uuid4()),
            meeting_id,
            speaker['speaker_id'],
            speaker['custom_name'],
            datetime.now().isoformat()
        ))
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ R√©union de test cr√©√©e avec l'ID: {meeting_id}")
    print("üë• Locuteurs personnalis√©s:")
    for speaker in speakers:
        print(f"   ‚Ä¢ {speaker['speaker_id']} ‚Üí {speaker['custom_name']}")
    
    return meeting_id

def main():
    print("=== CR√âATION D'UNE R√âUNION DE TEST ===")
    
    # Cr√©er la r√©union de test
    meeting_id = create_test_meeting_in_db()
    
    if meeting_id:
        print(f"\n‚úÖ R√©union de test cr√©√©e avec succ√®s!")
        print(f"üìã ID de la r√©union: {meeting_id}")
        print(f"üîó Vous pouvez maintenant tester avec: python test_mistral_with_custom_names.py")
    else:
        print("‚ùå Erreur lors de la cr√©ation de la r√©union de test")

if __name__ == "__main__":
    main() 