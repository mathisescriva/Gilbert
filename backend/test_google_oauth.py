#!/usr/bin/env python3
"""
Script de test pour l'impl√©mentation Google OAuth.

Ce script teste le nouveau flux OAuth complet c√¥t√© backend.
"""

import requests
import sys
import os
from urllib.parse import urlparse, parse_qs

# Configuration
API_BASE_URL = "http://localhost:8001"
EXPECTED_GOOGLE_AUTH_URL = "https://accounts.google.com/o/oauth2/v2/auth"

def test_google_oauth_redirect():
    """Test la redirection vers Google OAuth"""
    print("üß™ Test 1: Redirection vers Google OAuth")
    
    try:
        # Faire une requ√™te vers l'endpoint OAuth sans suivre les redirections
        response = requests.get(f"{API_BASE_URL}/auth/google", allow_redirects=False)
        
        # V√©rifier le code de statut de redirection
        if response.status_code != 302:
            print(f"‚ùå Erreur: Code de statut attendu 302, re√ßu {response.status_code}")
            return False
        
        # V√©rifier la pr√©sence de l'en-t√™te Location
        if 'Location' not in response.headers:
            print("‚ùå Erreur: En-t√™te Location manquant")
            return False
        
        location = response.headers['Location']
        parsed_url = urlparse(location)
        
        # V√©rifier que l'URL de redirection est vers Google
        if not location.startswith(EXPECTED_GOOGLE_AUTH_URL):
            print(f"‚ùå Erreur: URL de redirection incorrecte: {location}")
            return False
        
        # V√©rifier les param√®tres OAuth
        query_params = parse_qs(parsed_url.query)
        
        required_params = ['client_id', 'redirect_uri', 'scope', 'response_type', 'state']
        for param in required_params:
            if param not in query_params:
                print(f"‚ùå Erreur: Param√®tre manquant: {param}")
                return False
        
        # V√©rifier les valeurs des param√®tres
        if query_params.get('response_type', [''])[0] != 'code':
            print("‚ùå Erreur: response_type doit √™tre 'code'")
            return False
        
        if query_params.get('scope', [''])[0] != 'openid email profile':
            print("‚ùå Erreur: scope incorrect")
            return False
        
        # V√©rifier que l'√©tat n'est pas vide
        state = query_params.get('state', [''])[0]
        if not state or len(state) < 10:
            print("‚ùå Erreur: √âtat OAuth invalide ou trop court")
            return False
        
        print("‚úÖ Test 1 r√©ussi: Redirection vers Google OAuth correcte")
        print(f"   ‚Ä¢ URL: {location[:100]}...")
        print(f"   ‚Ä¢ √âtat: {state[:10]}...")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_oauth_state_manager():
    """Test le gestionnaire d'√©tats OAuth"""
    print("\nüß™ Test 2: Gestionnaire d'√©tats OAuth")
    
    try:
        # Importer le gestionnaire d'√©tats
        sys.path.append('.')
        from app.services.oauth_state_manager import oauth_state_manager
        
        # Test de g√©n√©ration d'√©tat
        state1 = oauth_state_manager.generate_state()
        state2 = oauth_state_manager.generate_state()
        
        if not state1 or not state2:
            print("‚ùå Erreur: Impossible de g√©n√©rer des √©tats")
            return False
        
        if state1 == state2:
            print("‚ùå Erreur: Les √©tats ne doivent pas √™tre identiques")
            return False
        
        if len(state1) < 32:
            print("‚ùå Erreur: √âtat trop court (s√©curit√© insuffisante)")
            return False
        
        # Test de validation d'√©tat
        if not oauth_state_manager.validate_state(state1):
            print("‚ùå Erreur: √âtat valide rejet√©")
            return False
        
        # Test d'usage unique
        if oauth_state_manager.validate_state(state1):
            print("‚ùå Erreur: √âtat utilis√© deux fois (doit √™tre √† usage unique)")
            return False
        
        # Test d'√©tat invalide
        if oauth_state_manager.validate_state("invalid_state"):
            print("‚ùå Erreur: √âtat invalide accept√©")
            return False
        
        print("‚úÖ Test 2 r√©ussi: Gestionnaire d'√©tats OAuth fonctionne")
        print(f"   ‚Ä¢ √âtats g√©n√©r√©s: {len(state1)} caract√®res")
        print(f"   ‚Ä¢ Usage unique: ‚úì")
        print(f"   ‚Ä¢ Validation: ‚úì")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_callback_error_handling():
    """Test la gestion d'erreurs du callback"""
    print("\nüß™ Test 3: Gestion d'erreurs du callback")
    
    try:
        # Test callback sans param√®tres
        response = requests.get(f"{API_BASE_URL}/auth/google/callback", allow_redirects=False)
        
        if response.status_code != 302:
            print(f"‚ùå Erreur: Code de statut attendu 302, re√ßu {response.status_code}")
            return False
        
        location = response.headers.get('Location', '')
        if 'error=missing_params' not in location:
            print(f"‚ùå Erreur: Gestion d'erreur manquante dans: {location}")
            return False
        
        # Test callback avec √©tat invalide
        response = requests.get(
            f"{API_BASE_URL}/auth/google/callback?code=test&state=invalid",
            allow_redirects=False
        )
        
        location = response.headers.get('Location', '')
        if 'error=invalid_state' not in location:
            print(f"‚ùå Erreur: √âtat invalide non d√©tect√© dans: {location}")
            return False
        
        print("‚úÖ Test 3 r√©ussi: Gestion d'erreurs du callback")
        print(f"   ‚Ä¢ Param√®tres manquants: ‚úì")
        print(f"   ‚Ä¢ √âtat invalide: ‚úì")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_configuration():
    """Test la configuration OAuth"""
    print("\nüß™ Test 4: Configuration OAuth")
    
    try:
        sys.path.append('.')
        from app.core.config import settings
        
        # V√©rifier que les variables de configuration existent
        required_vars = ['GOOGLE_CLIENT_ID', 'GOOGLE_CLIENT_SECRET', 'GOOGLE_REDIRECT_URI', 'FRONTEND_URL']
        
        for var in required_vars:
            if not hasattr(settings, var):
                print(f"‚ùå Erreur: Variable de configuration manquante: {var}")
                return False
        
        # V√©rifier l'URI de redirection
        redirect_uri = settings.GOOGLE_REDIRECT_URI
        if not redirect_uri.endswith('/auth/google/callback'):
            print(f"‚ùå Erreur: URI de redirection incorrecte: {redirect_uri}")
            return False
        
        print("‚úÖ Test 4 r√©ussi: Configuration OAuth")
        print(f"   ‚Ä¢ Variables configur√©es: {len(required_vars)}")
        print(f"   ‚Ä¢ URI de redirection: {redirect_uri}")
        print(f"   ‚Ä¢ URL frontend: {settings.FRONTEND_URL}")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    """Fonction principale du script de test"""
    print("üîß Test de l'impl√©mentation Google OAuth")
    print("=" * 50)
    
    # V√©rifier que le serveur est en marche
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=5)
        print(f"‚úÖ Serveur accessible sur {API_BASE_URL}")
    except requests.exceptions.RequestException:
        print(f"‚ùå Serveur inaccessible sur {API_BASE_URL}")
        print("   D√©marrez le serveur avec: uvicorn app.main:app --reload --port 8001")
        return False
    
    # Ex√©cuter les tests
    tests = [
        test_configuration,
        test_oauth_state_manager,
        test_google_oauth_redirect,
        test_callback_error_handling,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä R√©sultats: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Configurer vos variables d'environnement Google OAuth")
        print("2. Tester avec un vrai compte Google")
        print("3. Mettre √† jour votre frontend pour utiliser /auth/google")
        return True
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 