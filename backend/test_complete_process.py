#!/usr/bin/env python3
"""
Script pour tester la fonction process_meeting_summary compl√®te
"""

import sys
import os
import sqlite3

# Ajouter le r√©pertoire de l'application au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

def test_complete_process():
    """Tester la fonction process_meeting_summary compl√®te"""
    print("=== TEST COMPLET DE process_meeting_summary ===")
    
    try:
        from app.services.mistral_summary import process_meeting_summary
        
        # ID de notre r√©union de test
        meeting_id = "bc96e19f-f7df-4dba-aebb-4ce658309bc2"
        
        # R√©cup√©rer l'utilisateur de test
        conn = sqlite3.connect('app.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE email = ?", ("test@example.com",))
        user_result = cursor.fetchone()
        conn.close()
        
        if not user_result:
            print("‚ùå Utilisateur test non trouv√©")
            return
        
        user_id = user_result[0]
        print(f"üë§ User ID: {user_id}")
        print(f"üìã Meeting ID: {meeting_id}")
        
        # Remettre le statut √† pending
        conn = sqlite3.connect('app.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE meetings SET summary_status = 'pending', summary_text = NULL WHERE id = ?", (meeting_id,))
        conn.commit()
        conn.close()
        print("üîÑ Statut remis √† 'pending'")
        
        # Appeler la fonction compl√®te en mode synchrone (async_mode=False)
        print("\nüöÄ Lancement de process_meeting_summary...")
        success = process_meeting_summary(meeting_id, user_id, async_mode=False)
        
        if success:
            print("‚úÖ process_meeting_summary a r√©ussi!")
            
            # V√©rifier le r√©sultat dans la base de donn√©es
            conn = sqlite3.connect('app.db')
            cursor = conn.cursor()
            cursor.execute("SELECT summary_status, summary_text FROM meetings WHERE id = ?", (meeting_id,))
            result = cursor.fetchone()
            conn.close()
            
            if result:
                status, summary_text = result
                print(f"üìä Statut final: {status}")
                print(f"üìè Longueur du texte: {len(summary_text) if summary_text else 0} caract√®res")
                
                if summary_text:
                    print("\nüìù Extrait du compte rendu:")
                    print("=" * 50)
                    print(summary_text[:500] + "..." if len(summary_text) > 500 else summary_text)
                    print("=" * 50)
                    
                    # V√©rifier la pr√©sence des noms personnalis√©s
                    custom_names = ["Marie Dupont (CEO)", "Jean Martin (CTO)", "Sophie Leclerc (Dev Lead)"]
                    print("\nüîç V√©rification des noms personnalis√©s:")
                    for name in custom_names:
                        if name in summary_text:
                            print(f"   ‚úÖ '{name}' trouv√© dans le compte rendu")
                        else:
                            print(f"   ‚ùå '{name}' NON trouv√© dans le compte rendu")
                else:
                    print("‚ùå Aucun texte de compte rendu g√©n√©r√©")
            else:
                print("‚ùå Impossible de r√©cup√©rer le r√©sultat de la base de donn√©es")
        else:
            print("‚ùå process_meeting_summary a √©chou√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_complete_process() 